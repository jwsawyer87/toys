#! /usr/bin/env python

import os
import sys
import time
import signal
import tempfile
import subprocess

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: %s [FILENAME ...]\n" % sys.argv[0])
  exit(1)

def debug(msg):
  if False:
    sys.stderr.write(msg + '\n')

def cleanup(signum=None, frame=None):
  signals = {1: "SIGHUP", 2: "SIGINT", 3: "SIGQUIT", 4: "SIGILL", 5: "SIGTRAP", 6: "SIGABRT", 6: "SIGIOT", 7: "SIGBUS", 8: "SIGFPE", 9: "SIGKILL", 10: "SIGUSR1", 11: "SIGSEGV", 12: "SIGUSR2", 13: "SIGPIPE", 14: "SIGALRM", 15: "SIGTERM", 16: "SIGSTKFLT", 17: "SIGCHLD", 18: "SIGCONT", 19: "SIGSTOP", 20: "SIGTSTP", 21: "SIGTTIN", 22: "SIGTTOU", 23: "SIGURG", 24: "SIGXCPU", 25: "SIGXFSZ", 26: "SIGVTALRM", 27: "SIGPROF", 28: "SIGWINCH", 29: "SIGIO", 29: "SIGLOST", 30: "SIGPWR", 31: "SIGSYS", 32: "SIGRTMIN", 8192: "SIGSTKSZ"}

  if signum:
    print "Caught signal %s" % (signals[signum] if signum in signals else signum)
  if name:
    debug("Removing %s" % repr(name))
    os.remove(name)
  exit(0)

if not sys.stdout.isatty():
  syntax("stdout must not be redirected")

if sys.stdin.isatty():
  """
    If stdin has not be redirected, we'll act like the old `br` script and just invoke `vi -R argv[1] ...`
  """
  os.execvp("vi", ["vi", "-R"] + sys.argv[1:])
  assert False, "os.execvp() of `vi` returned control to us!"

name = None

signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)

(fd, name) = tempfile.mkstemp()
debug("Created %s" % repr(name))
os.write(fd, sys.stdin.read())
os.close(fd)

with open("/dev/tty", 'r') as tty:
  p = subprocess.Popen(["vi", "-R", name], stdin=tty)
  rc = p.wait()

cleanup()
