#! /usr/bin/env python

"""
   ssh to one or more systems in a chain of one or more remote systems

     - to execute the exact same command on multiple systems, separate each system with semicolons
     - to execute a command on a system after ssh'ing to another system, separate the systems with a comma

   Examples:

     chainssh node1;node2 date # runs `date` on node1 and node2
     chainssh node1,node2 date # ssh's to node1 and then ssh to node2 and run `date` - the command is run once and presumably the host node doesn't have access to node2 but node1 does

   Features:
     - `localhost` can be used to execute the command on the local system without ssh
     - The `-q` option controls whether or not `ssh -q` to be used in every instance, voiding "messages of the day".  By default, `ssh -q` will be used and each instance of the option will toggle the settings
"""

"""
  $ ./chainssh localhost\;node1\;ubuntu@$node2 date -u +%Y/%m/%d\ %H:%M:%S.%N
  *************
  * localhost *
  *************
  2019/01/08 17:36:23.115403500

  *********
  * node1 *
  *********
  2019/01/08 17:36:24.276668928

  ****************
  * ubuntu@node2 *
  ****************
  2019/01/08 17:33:52.879256462
  $
"""

import sys
import getopt
import subprocess

def debug(msg):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def banner(s):
  border = '*' * (len(s) + 4)
  print border
  print '* %s *' % s
  print border

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-q|--quiet] [-v|--verbose] [user@]node[,[user@]node ... ][;[user@]node ...] cmd\n'.format(pgm=sys.argv[0]))
  exit(1)

def reform(cmd):
  for pos in range(len(cmd)):
    for meta in metas:
      cmd[pos] = cmd[pos].replace(meta, '\\{meta}'.format(**locals()))
    cmd[pos] = '"' + cmd[pos] + '"'
  return cmd

metas = '\\$" '

quiet = True
verbose = False
(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'qv', ['quiet', 'verbose'])
except Exception as e:
  syntax('Caught `{e}`'.format(**locals()))

for (opt, arg) in opts:
  if opt in ['-v', '--verbose']:
    verbose = not verbose
  elif opt in ['-q', '--quiet']:
    quiet = not quiet
  else:
    syntax('Unexpected option {opt!r}'.format(**locals()))

if len(args) < 2:
  syntax()

def process(hosts):
  global count

  if count:
    print ''
  count += 1

  path = []
  p = None

  if hosts == ['localhost']:
    banner('localhost')
    debug(args[1:])
    p = subprocess.Popen(['bash', '-c', ' '.join(args[1:])])
  else:
    chain = []
    cmd = args[1:]

    for (iteration, host) in enumerate(hosts):
      path.append(host)
      chain += ['ssh'] + (['-q'] if quiet else []) + [host]
      if iteration:
        cmd = reform(cmd)
      else:
        cmd = [token.replace(' ', '\\ ') for token in cmd]

    banner (' -> '.join(path))
    debug(chain + cmd)
    p = subprocess.Popen(chain + cmd)

  rc = p.wait()

count = 0
for hosts in args[0].split(';'):
  process(hosts.split(','))
