#! /usr/bin/python -u

import pdb

import sys
import json
import getopt
import datetime

class Timer:
  def __init__(self):
    self.startTimestamp = datetime.datetime.now()
    self.stopTimestamp  = None

  def stop(self):
    self.stopTimestamp = datetime.datetime.now()

  def elapsed(self):
    if not self.stopTimestamp:
      self.stop()
    return self.stopTimestamp - self.startTimestamp

def debug(s):
  if verbose:
    sys.stderr.write("%s: %s\n" % (datetime.datetime.now(), s))

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: %s [-v|--verbose] [-d|--debug] [-f=FILE|--file=FILE]\n")
  exit(1)
  
verbose = False
stream = None
(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "vdf:", ["verbose", "debug", "file="])
except Exception as e:
  syntax(str(e))

for (opt,arg) in opts:
  if opt in ["-d", "--debug"]:
    pdb.set_trace()
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-f", "--file"]:
    stream = open(arg)

if not stream:
  if sys.stdin.isatty():
    syntax("stdin must be redirected if -f/--file is not specified")
  stream = sys.stdin

objs = []
readTimer = Timer()
lines = ""
for line in stream:
  lines += line
  try:
    objs.append(json.loads(lines))
  except Exception as e:
    # raise Exception("Caught %s with line %d: %s" % (e, len(objs)+1, repr(line)))
    pass
  else:
    lines = ""

debug("%d elements read in %s" % (len(objs), readTimer.elapsed()))

if all(["timestamp" in datum for datum in objs]):
  sortTimer = Timer()
  objs = sorted(objs, key=lambda datum: datum["timestamp"])
  sortTimer.stop()
  debug("sorted in %s" % sortTimer.elapsed())

printTimer = Timer()
print json.dumps(objs, indent=2, sort_keys=True)
debug("printed in %s" % printTimer.elapsed())
