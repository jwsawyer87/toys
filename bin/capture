#! /usr/bin/env python

import sys
import time
import datetime
import threading
import subprocess

class Redirect(threading.Thread):
  def __init__(self, stream_name, in_stream, out_stream):
    self.stream_name = stream_name
    self.in_stream = in_stream
    self.out_stream = out_stream
    super(Redirect, self).__init__()

  def run(self):
    global lock

    buf = ''
    done = False
    stream_name = self.stream_name
    while not done:
      c = self.in_stream.read(1)
      now = datetime.datetime.now()
      if c:
        if c == '\n':
          if not buf:
            buf = '{stream_name} {now}'.format(**locals())
          lock.acquire()
          self.out_stream.write('{buf}\n'.format(**locals()))
          lock.release()
          buf = ''
        elif c != '\r':
          if not buf:
            buf = '{stream_name} {now} '.format(**locals())
          buf += c
      else:
        done = True
    if buf:
      lock.acquire()
      self.out_stream.write('{stream_name} {buf}\n'.format(**locals()))
      lock.release()

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('{pgm} cmd ...\n'.format(pgm=sys.argv[0]))
  exit(1)

def redirect(p, stream_name):
  global threads
  threads.append(Redirect(stream_name, getattr(p, stream_name), getattr(sys, stream_name)))
  threads[-1].start() 

if len(sys.argv) < 2:
  syntax()

threads = []
lock = threading.Lock()

start = datetime.datetime.now()
p = subprocess.Popen(sys.argv[1:], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
redirect(p, 'stdout')
redirect(p, 'stderr')
rc = p.wait()
finish = datetime.datetime.now()

while any([thread.isAlive() for thread in threads]):
  time.sleep(.1)

print 'Elapsed time: {elapsed}s'.format(elapsed=finish-start)
