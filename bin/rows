#! /usr/bin/env python

"""
  Display portions of stdin through their specific line numbers (zero based), ranges of line numbers, and regular expressions

    rows 1:-2 # print lines 2 up through and including the next to last line
    row -v re=foo  # print all lines except those that match the regular expression `foo`
"""

import sys
import re
import getopt

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-v|--negate] [NUM[:NUM]] [re=REGEXP] ... \n'.format(pgm=sys.argv[0]))
  exit(1)

if sys.stdin.isatty():
  syntax('stdin must be redirected')

negate = False

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'v', ['negate'])
except Exception as e:
  syntax('Caught `{e!s}`'.format(**locals()))

for (opt, arg) in opts:
  if opt in ['-v', '--negate']:
    negate = not negate
  else:
    syntax('Unexpected option {opt!r}'.format(**locals()))

if not args:
  syntax('No ranges or regular expressions specified')

range_regexp = re.compile('^(-?\d+)(:(-?\d+))?$')
re_regexp = re.compile('^re=(.+)$')

lines = sys.stdin.read().splitlines()

choices = [negate] * len(lines)
for arg in args:
  match = range_regexp.search(arg)
  if match:
    pass
  else:
    match = re_regexp.search(arg)
    if match:
      regexp = re.compile(match.group(1))
      for (pos, line) in enumerate(lines):
        match = regexp.search(line)
        # print regexp.pattern, line, match
        if match and (not choices[pos]):
          choices[pos] = True
        elif (not match) and choices[pos]:
          choices[pos] = False
    else:
      syntax('{arg!r} is not recognized')

for (pos, chosen) in enumerate(choices):
  if chosen:
    print lines[pos]
