#! /usr/bin/env python

"""
  Display portions of stdin through their specific line numbers (positive integers, base 0).

  Examples:
    
    cat ... | rows 0 10 20 30 0 # first line is repeated
    rows {0..99} < file         # works the same as `head -100`, relies on the shell to expand the range before the script is even invoked
"""

import sys
import re
import getopt

assert not sys.stdin.isatty(), 'stdin must be redirected'

assert len(sys.argv) > 1, 'Syntax: {pgm} NUM|(NUM)-(NUM)|(NUM):(NUM)|re=REGEXP ...'.format(pgm=sys.argv[0])

numeric_regexp = re.compile('^(\d+)?([-:])(\d+)?$')
re_regexp = re.compile('^re=(.+)$')

lines = sys.stdin.read().splitlines()

for arg in sys.argv[1:]:
  match = numeric_regexp.search(arg)
  if match:
    if match.group(1) is not None:
      start = int(match.group(1))
    else:
      start = 0

    if match.group(2) == '-':
      if match.group(3) is not None:
        stop = int(match.group(3))
      else:
        stop = len(lines)-1
      assert stop >= start, '{start} > {stop}'.format(**locals())
    else:
      if match.group(3) is not None:
        stop = start + int(match.group(3)) - 1
      else:
        stop = len(lines)-1

    assert (start >= 0) and (stop < len(lines)), '{arg!r} is out of range - stdin has {lines} lines'.format(arg=arg, lines=len(lines))

    for num in range(start, stop+1):
      print lines[num]

  else:
    match = re_regexp.search(arg)
    if match:
      regexp = re.compile(match.group(1))
      for line in lines:
        if regexp.search(line):
          print line
    else:
      arg = int(arg)
      assert 0 <= arg < len(lines), '`{arg}` is out of range - stdin has {lines} lines'.format(arg=arg, lines=len(lines))
      print lines[arg]
