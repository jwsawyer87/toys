#! /usr/bin/env python

import subprocess
import re
import sys
import getopt
import logging
import argparse

# ibmadmin@z-watchman:~/zwatchman-github$ tty
# /dev/pts/8
# ibmadmin@z-watchman:~/zwatchman-github$ who
# ibmadmin pts/8        2016-12-22 08:12 (9.27.95.171)
# ibmadmin@z-watchman:~/zwatchman-github$ nslookup 9.27.95.171
# Server:         9.42.106.2
# Address:        9.42.106.2#53
# 
# Non-authoritative answer:
# 171.95.27.9.in-addr.arpa        name = ibm750-r9rw756.raleigh.ibm.com.
# 
# Authoritative answers can be found from:
# 
# ibmadmin@z-watchman:~/zwatchman-github$

def run(cmd):
  log.debug("Running `%s`, " % cmd)
  p = None
  try:
    p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  except Exception as e:
    log.warning('{cmd!r} failed: {e!s}'.format(**locals()))
    return ''

  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug("rc=%d, stdout=%s, sterr=%s" % (rc, repr(stdout), repr(stderr)))
  return stdout

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--ip-ok', dest='ipOk', action='store_true', help='IP address is ok, node name is not necessary')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

tty = None
out = run("tty")
match = re.match("/dev/(.*)$", out)
if match:
  tty = match.group(1)

if not tty:
  log.error("Could not determine tty")
  exit(1)

log.info("tty is `%s`" % tty)

incomingIP = None
for line in run("who").strip('\r').split('\n'):
  tokens = line.split()
  if (len(tokens) == 5) and (tokens[1] == tty):
    match = re.match("\((.*)\)$", tokens[-1])
    if match:
      incomingIP = match.group(1)

if not incomingIP:
  log.error("Could not determine incoming IP")
  exit(1)

log.info("incoming IP is `%s`" % incomingIP)

if re.match("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", incomingIP):
  """
    Output from `who` contained a dotted address so we want to resolve it
  """
  incomingHost = None
  for line in run("nslookup %s" % incomingIP).strip('\r').split('\n'):
    match = re.search("name = (.*)\.$", line)
    if match:
      incomingHost = match.group(1)
else:
  """
    Output from `who` did not contain a dotted address so we don't need
    to resolve it
  """
  incomingHost = incomingIP

if incomingHost:
  log.info("incoming host is `%s`" % incomingHost)
elif incomingIP and args.ipOk:
  log.info("incoming IP is %s" % incomingIP)
else:
  log.error("Could not determine incoming host")
  exit(1)

if incomingHost:
  print incomingHost
elif incomingIP and args.ipOk:
  print incomingIP
else:
  exit(1)
