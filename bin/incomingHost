#! /usr/bin/env python

import subprocess
import re
import sys
import getopt

# ibmadmin@z-watchman:~/zwatchman-github$ tty
# /dev/pts/8
# ibmadmin@z-watchman:~/zwatchman-github$ who
# ibmadmin pts/8        2016-12-22 08:12 (9.27.95.171)
# ibmadmin@z-watchman:~/zwatchman-github$ nslookup 9.27.95.171
# Server:         9.42.106.2
# Address:        9.42.106.2#53
# 
# Non-authoritative answer:
# 171.95.27.9.in-addr.arpa        name = ibm750-r9rw756.raleigh.ibm.com.
# 
# Authoritative answers can be found from:
# 
# ibmadmin@z-watchman:~/zwatchman-github$

verbose=False
ipOk=False

def syntax():
  sys.stderr.write("Syntax: %s [-v|--verbose]\n" % sys.argv[0])
  exit(1)

def run(cmd):
  if verbose:
    sys.stderr.write("Running `%s`, " % cmd)
  p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  if verbose:
    sys.stderr.write("rc=%d, stdout=%s, sterr=%s\n" % (rc, repr(stdout), repr(stderr)))
  return stdout

(args,opts) = getopt.getopt(sys.argv[1:], "vih", ["ip-ok", "verbose", "help"])
for (arg,opt) in args:
  if arg in ["-v", "--verbose"]:
    verbose = not verbose
  elif arg in ["-i", "--ip-ok"]:
    ipOk = True
  else:
    syntax()

tty = run("tty")
match = re.match("/dev/(.*)$", tty)
if match:
  tty = match.group(1)

if verbose:
  if tty:
    sys.stderr.write("tty is `%s`\n" % tty)
  else:
    sys.stderr.write("Could not determine tty\n")

if not tty:
  exit(1)

incomingIP = None
for line in run("who").strip('\n').split('\n'):
  tokens = line.split()
  if (len(tokens) == 5) and (tokens[1] == tty):
    match = re.match("\((.*)\)$", tokens[-1])
    if match:
      incomingIP = match.group(1)

if verbose:
  if incomingIP:
    sys.stderr.write("incoming IP is `%s`\n" % incomingIP)
  else:
    sys.stderr.write("Could not determine incoming IP\n")

if not incomingIP:
  exit(1)

if re.match("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", incomingIP):
  """
    Output from `who` contained a dotted address so we want to resolve it
  """
  incomingHost = None
  for line in run("nslookup %s" % incomingIP).strip('\n').split('\n'):
    match = re.search("name = (.*)\.$", line)
    if match:
      incomingHost = match.group(1)
else:
  """
    Output from `who` did not contain a dotted address so we don't need
    to resolve it
  """
  incomingHost = incomingIP

if verbose:
  if incomingHost:
    sys.stderr.write("incoming host is `%s`\n" % incomingHost)
  elif incomingIP and ipOk:
    sys.stderr.write("incoming IP is %s\n" % incomingIP)
  else:
    sys.stderr.write("Could not determine incoming host\n")
    exit(1)
elif incomingHost:
  print incomingHost
elif incomingIP and ipOk:
  print incomingIP
else:
  exit(1)
