#! /usr/bin/env python

"""
   Perform md5sum against local and remote files (via ssh).  This works best
   if the ssh keys are in place but ssh can also prompt for the password if
   the keys are not in place.
"""

import re
import sys
import getopt
import hashlib
import subprocess

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-k|--keys] file|[user@]node:file ...\n'.format(pgm=sys.argv[0]))
  exit(1)

def process(filename):
  data = []
  tokens = re.split(':', filename, maxsplit=1)
  if len(tokens) == 1:
    with open(filename) as stream:
      data = stream.read() 
  else:
    p = subprocess.Popen([
                           'ssh', 
                           '-q', 
                         ] +
                         ([] if useKeys else ['-o', 'PreferredAuthentications=password', '-o', 'PubkeyAuthentication=no']) +
                         [
                           tokens[0], 
                           'cat', 
                           tokens[1]
                         ], 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (data, stderr) = p.communicate()
    rc = p.wait()
    if rc != 0:
      sys.stderr.write('Cannot read {filename}: {stderr!r}'.format(**locals()))
      return
  hash = hashlib.md5()
  hash.update(data)
  print '{digest} {filename}'.format(digest=hash.hexdigest(), **locals())

if len(sys.argv) == 1:
  syntax()

useKeys = True

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'k', ['keys'])
except Exception as e:
  syntax('Caught: `{e!s}`'.format(**locals()))

for (opt, arg) in opts:
  if opt in ['-k', '--keys']:
    useKeys = not useKeys
  else:
    syntax('Unexpected option {opt!r}'.format(**locals()))

map(process, args)
