#! /usr/bin/env python

import sys
import string
import re
import getopt
import csv
import StringIO

def syntax(msg = None):
  if msg:
    sys.stderr.write("%s\n\n" % msg)
  sys.stderr.write("Syntax: %s [-s] [-F |] [--regexp pattern] field ...\n" % sys.argv[0])
  exit(1)

regexp = None
delim = ' '
pat = ' +'
csvInput = False
squeeze = False # squeeze consecutive fields together: treating them as one
ignore = False # ignore lines that do not have the desired fields

if sys.stdin.isatty():
  syntax("stdin is not redirected")

(opts,args) = getopt.getopt(sys.argv[1:], "isF:", ["regexp=", "csv"])

for (opt,arg) in opts:
   if opt == "-F":
     delim = arg
   elif opt == "-s":
     squeeze = not squeeze
   elif opt == "-i":
     ignore = not ignore
   elif opt == "--regexp":
     regexp = re.compile(arg)
   elif opt == "--csv":
     csvInput = not csvInput
   else:
     syntax("Unknown option `%s`" % opt)

if not args:
  syntax()

if delim == "\\t":
  delim = '\t'

values = []

"""
  expand ranges of fields
"""
curr = 0
while curr < len(args):
  match = re.search("^(\d+)-(\d+)$", args[curr])
  if match:
    low = int(match.group(1))
    high = int(match.group(2))
    args = args[:curr] + [str(low + inc) for inc in range(high-low+1)] + args[curr+1:]
    values += [None] * (high-low+1)
  else:
    match = re.search("^(\d+)\*(\d+)$", args[curr])
    if match:
      field = int(match.group(1))
      repeat = int(match.group(2))
      args = args[:curr] + ([str(field)]*repeat) + args[curr+1:]
      values += [None] * repeat
    else:
      match = re.search("^(\d+)=(.+)$", args[curr])
      if match:
        args[curr] = int(match.group(1))
        values.append(match.group(2))
      else:
        values.append(None)
  curr += 1

desiredFields = []
try:
  for field in args:
    field = int(field)
    if field == 0:
      raise Exception("Field cannot be zero")
    if (field > 0) and (not regexp):
      field -= 1
    desiredFields += [field]
except Exception as e:
  syntax("Invalid field: `%s`" % str(e))

for line in sys.stdin:
  line = string.replace(string.replace(line, '\n', ''), '\r', '')
  if squeeze:
    line = re.sub(pat, delim, line.strip(delim))
  output = []
  if regexp:
    match = regexp.search(line)
    if match:
      print delim.join([match.group(field) for field in desiredFields])
  else:
    if csvInput:
      tokens = (csv.reader(StringIO.StringIO(line))).next()
    else:
      tokens = line.split(delim)

    skip = False
    for curr in range(len(values)):
      value = values[curr]
      if (value != None) and (curr < len(tokens)) and (value != tokens[curr]):
        skip = True
        break

    if not skip:
      for field in desiredFields:
        if field < len(tokens):
          output += [tokens[field]]
      if (not ignore) or (len(output) > 0):
        print delim.join(output)
